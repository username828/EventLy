// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  output   = "../generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User{
  id Int @id @default(autoincrement())
  name String
  email String @unique
  bookings Booking[]
  comments Comment[]
  reviews Review[]
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Event{
  id Int @id @default (autoincrement())
  title String
  description String?
  date DateTime
  bookings Booking[]
  comments Comment[]
  reviews Review[]
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}


model Booking {
  id        Int      @id @default(autoincrement())
  user      User     @relation(fields: [userId], references: [id])
  userId    Int
  event     Event    @relation(fields: [eventId], references: [id])
  eventId   Int
  createdAt DateTime @default(now())
}

model Comment {
  id        Int      @id @default(autoincrement())
  content   String
  user      User     @relation(fields: [userId], references: [id])
  userId    Int
  event     Event    @relation(fields: [eventId], references: [id])
  eventId   Int
  createdAt DateTime @default(now())
}

model Review {
  id        Int      @id @default(autoincrement())
  rating    Int      // e.g., 1 to 5
  content   String?  // optional written review
  user      User     @relation(fields: [userId], references: [id])
  userId    Int
  event     Event    @relation(fields: [eventId], references: [id])
  eventId   Int
  createdAt DateTime @default(now())

  @@unique([userId, eventId]) // each user can only leave one review per event
}
